#!/usr/bin/env bash
# v5.5.1

config_dir="$HOME/.config/"
cache_dir="$HOME/.cache"
cache="$cache_dir/sweetcache/"

packages="polybar-git rofi alacritty picom-arian8j2-git dunst eww-git ffmpeg\
   pipewire pipewire-alsa pipewire-pulse pipewire-jack wireplumber alsa-utils pamixer \
   bluez bluez-utils \
   mpd mpdris2-git \
   brightnessctl playerctl light lm_sensors \
   feh i3lock-color ksuperkey sddm yad cava xclip scrot gpick xfce4-power-manager zscroll neovim viewnior\
   ttf-sarasa-gothic ttf-jetbrains-mono ttf-icomoon-feather nerd-fonts-jetbrains-mono \
   gtk3 gtk-engine-murrine gnome-themes-extra papirus-icon-theme"




alert () {
    log_info="$(date +"%H:%M:%S") \e[0;34mINFO\e[0m"
    log_error="$(date +"%H:%M:%S") \e[1;31mERROR\e[0m"
    log_warning="$(date +"%H:%M:%S") \e[0;33mWARNING\e[0m"
    log_success="$(date +"%H:%M:%S") \e[0;32mSUCCESS\e[0m"
  
    case $1 in
        -e | --error)
            printf "$log_error %s\n" $2
        ;;
        -w | --warning)
            printf "$log_warning %s\n" $2
        ;;
        -s | --success)
            printf "$log_success %s\n" $2
        ;;
        *)
        printf "$log_info %s\n" $1
        ;;
    esac
}

make_cache () {
    alert "Making Cache Folders"

    [[ ! -d $dotfiles ]] && [[ ! -d $sweetcache ]] && mkdir -p "$cache" "$sweetcache" 2>/dev/null
    [[ ! -d /usr/share/xsessions ]] && sudo mkdir -p /usr/share/xsessions/

    echo
    alert -s "Caching Done!"
    echo
}

make_backup () {
    alert "Making Backups"
    echo
    alert -w "Backup Folder is in ~/.backups"

    [[ ! -d $HOME/.backups ]] && mkdir $HOME/.backups 2>/dev/null || alert -e "Can't Create a Backup Folder"

    tempdir=$(mktemp -d -p $HOME/.backups)

    [[ -d $config_dir/bspwm ]] && mv $config_dir/bspwm $tempdir
    [[ -d $config_dir/berry ]] && mv $config_dir/berry $tempdir
    [[ -d $config_dir/i3 ]] && mv $config_dir/i3 $tempdir
    [[ -d $config_dir/leftwm ]] && mv $config_dir/leftwm $tempdir

    echo
    alert -s "Backup Done!"
    echo
}

confirm_install () {
    clear
    printf "01010011 01110111 01100101 01100101 01110100\n"
    printf "01000010 01100101 01110010 01110010 01111001\n"
    printf "     The Rice with pastel colors\n"
    echo

    echo
    confirm_msg=$(alert -w "Are you sure you want to continue? Y/N")
    read -p "$confirm_msg : " confirm

    case $confirm in
        Y | y | Yes | yes)
            make_cache
            make_backup
            updating_packages
        ;;
        *)
            alert -e "Aborting!"
        ;;
    esac
}

updating_packages () {
    alert "Updating Packages"

    sudo pacman -Syu git curl bash zsh python moreutils

    echo
    alert -s "Update Done!"
    echo

    installing_aur
}

installing_aur () {
    alert "Installing AUR"
    sleep 1
    echo

    if [[ ! $(command -v yay) ]] && [[ ! $(command -v paru) ]]; then
        alert -e "Can't find a AUR Helper, Installing"
        echo

        alert "Pick a AUR Helper"
        echo
        read -p "(1)paru | (2)yay : " helper

        case $helper in
            1)
                cd $cache_dir
                git clone https://aur.archlinux.org/paru-bin.git
                cd paru-bin
                makepkg -si
                paru -S $packages

                echo
                alert -s "AUR Done!"
                echo

                pick_wm
            ;;
            2)
                cd $cache_dir
                git clone https://aur.archlinux.org/yay-bin.git
                cd yay-bin
                makepkg -si
                yay -S $packages

                echo
                alert -s "AUR Done!"
                echo

                pick_wm
            ;;
            *)
                alert -e "Invalid Choice. Aborting!"
                exit 0
            ;;
        esac
    else
        if command -v yay; then
            yay -S $packages

            echo
            alert -s "AUR Done!"
            echo

            pick_wm
        elif command -v paru; then
            paru -S $packages

            echo
            alert -s "AUR Done!"
            echo

            pick_wm
        else
            alert -e "AUR Helper has not installed yet please run the script again or install Yay or Paru"
        fi
    fi
}

pick_wm () {
    echo
    alert "Pick a Window Manager"
    echo

    echo "BSPWM (1)"
    echo "BerryWM (2)"
    echo "i3-Gaps (3)"
    echo "LeftWM (4)"
    echo
    echo "More Window Manager will be added soon"
    echo
    read -p "Window Manager : " wm

    case $wm in
        1)
            cp -rf $dotfiles/window-managers/bspwm $config_dir
            config_str="bspc config border_radius 20"

            echo
            alert "Choose which type of bspwm you want"
            echo

            echo
            printf "bspwm-git (1) - The official build but without integrated border radius"
            printf "bspwm-rounded-corners-git (2) - Adds integrated border radius without depending on picom"
            echo
            read -p "BSPWM: " bspwm

            case $bspwm in
                1)
                    bspwm_type="bspwm-git"

                    sed -i '/$config_str/d' $config_dir/bspwm/bspwmrc
                ;;
                2)
                    bspwm_type="bspwm-rounded-corners-git"

                    if ! grep -Fxq $config_str $config_dir/bspwm/bspwmrc; then
                        echo $config_str >> $config_dir/bspwm/bspwmrc
                    fi
                ;;
                *)
                    alert -e "Invalid Choice. Aborting!"
                    exit 0
                ;;
            esac

            if command -v yay; then
                yay -S $bspwm_type

                echo
                alert -s "Installing Done!"
                echo

                installing_dotfiles
            elif command -v paru; then
                paru -S $bspwm_type

                echo
                alert -s "Installing Done!"
                echo

                installing_dotfiles
            else
                alert -e "AUR Helper has not installed yet please run the script again or install Yay or Paru"
            fi
        ;;
        2)
            cp -rf $dotfiles/window-managers/berry $config_dir

            if command -v yay; then
                yay -S berry-git

                echo
                alert -s "Installing Done!"
                echo

                installing_dotfiles
            elif command -v paru; then
                paru -S berry-git

                echo
                alert -s "Installing Done!"
                echo

                installing_dotfiles
            else
                alert -e "AUR Helper has not installed yet please run the script again or install Yay or Paru"
            fi
        ;;
        3)
            cp -rf $dotfiles/window-managers/i3 $config_dir

            if command -v yay; then
                yay -S i3-gaps

                echo
                alert -s "Installing Done!"
                echo

                installing_dotfiles
            elif command -v paru; then
                paru -S i3-gaps

                echo
                alert -s "Installing Done!"
                echo

                installing_dotfiles
            else
                alert -e "AUR Helper has not installed yet please run the script again or install Yay or Paru"
            fi
        ;;
        4)
            cp -rf $dotfiles/window-managers/leftwm $config_dir

            if command -v yay; then
                yay -S leftwm

                echo
                alert -s "Installing Done!"
                echo

                installing_dotfiles
            elif command -v paru; then
                paru -S leftwm

                echo
                alert -s "Installing Done!"
                echo
                
                installing_dotfiles
            else
                alert -e "AUR Helper has not installed yet please run the script again or install Yay or Paru"
            fi
        ;;
        *)
            alert -e "Invalid Choice. Aborting!"
            exit 0
        ;;
    esac
}

installing_dotfiles () {
    echo
    alert "Cloning repository"

    cd $cache_dir && git clone https://github.com/Deathemonic/SweetDots -b xorg

    echo
    alert -s "Cloning Done!"
    echo

    alert "Copying Dotfiles"
    [[ ! -d $config_dir/sweetconfigs-xorg ]] && cp -rf $cache_dir/SweetDots/sweetconfigs-xorg $config_dir || alert -e "Configs are already existed. Skipping!"
    
    echo
    alert -s "Copying Done!"
    echo

    finishing
}

finishing () {
    alert -w "If you have problems with the installer please create a issue from the repo, If you have something to improve please create a Pull Reques from the repo"
    echo

    alert -s "Done!"
}

make_cache
make_backup
confirm_install