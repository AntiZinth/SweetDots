#!/usr/bin/env python3
# encoding:utf8

# Please credit https://github.com/firecat53 if you want to use this code

import pathlib
import struct
import configparser
import locale
import os
from os.path import expanduser
import shlex
from shutil import which
import sys
import uuid
import subprocess

import gi
gi.require_version('NM', '1.0')
from gi.repository import GLib, NM

ENV = os.environ.copy()
ENV['LC_ALL'] = 'C'
ENC = locale.getpreferredencoding()

CLIENT = NM.Client.new(None)
LOOP = GLib.MainLoop()
CONNS = CLIENT.get_connections()

CONF = configparser.ConfigParser()
CONF.read(expanduser("~/.config/sweetconfigs-xorg/rofi/network.ini"))

def cli_args():
    args = sys.argv[1:]
    cmd = CONF.get('dmenu', 'dmenu_command', fallback=False)
    if "-l" in args or "-p" in args:
        for nope in ['-l', '-p'] if cmd is not False else ['-p']:
            try:
                nope_idx = args.index(nope)
                del args[nope_idx]
                del args[nope_idx]
            except ValueError:
                pass
    return args


def dmenu_pass(command, color):
    if command != 'dmenu':
        return None
    try:
        dm_patch = b'P' in subprocess.run(["dmenu", "-h"],
                                          capture_output=True,
                                          check=False).stderr
    except FileNotFoundError:
        dm_patch = False
    return ["-P"] if dm_patch else ["-nb", color, "-nf", color]


def dmenu_cmd(num_lines, prompt="Networks", active_lines=None):
    commands = {"dmenu": ["-p", str(prompt)],
                "rofi": ["-dmenu", "-p", str(prompt), "-l", str(num_lines)],
                "bemenu": ["-p", str(prompt)],
                "wofi": ["-p", str(prompt)]}
    command = shlex.split(CONF.get('dmenu', 'dmenu_command', fallback="dmenu"))
    command.extend(cli_args())
    command.extend(commands.get(command[0], []))
    rofi_highlight = CONF.getboolean('dmenu', 'rofi_highlight', fallback=False)
    if rofi_highlight is True and command[0] == "rofi" and active_lines:
        command.extend(["-a", ",".join([str(num) for num in active_lines])])
    obscure = CONF.getboolean('dmenu_passphrase', 'obscure', fallback=False)
    if prompt == "Passphrase" and obscure is True:
        obscure_color = CONF.get('dmenu_passphrase', 'obscure_color', fallback='#222222')
        pass_prompts = {"dmenu": dmenu_pass(command[0], obscure_color),
                        "rofi": ['-password'],
                        "bemenu": ['-x'],
                        "wofi": ['-P']}
        command.extend(pass_prompts.get(command[0], []))
    return command


def choose_adapter(client):
    devices = client.get_devices()
    devices = [i for i in devices if i.get_device_type() == NM.DeviceType.WIFI]
    if not devices:
        return None
    if len(devices) == 1:
        return devices[0]
    device_names = "\n".join([d.get_iface() for d in devices])
    sel = subprocess.run(dmenu_cmd(len(devices), "Choose Adapter:"),
                         capture_output=True,
                         check=False,
                         env=ENV,
                         input=device_names,
                         encoding=ENC).stdout
    if not sel.strip():
        sys.exit()
    devices = [i for i in devices if i.get_iface() == sel.strip()]
    assert len(devices) == 1
    return devices[0]

def is_installed(cmd):
    return which(cmd) is not None

def bluetooth_get_enabled():
    for path in pathlib.Path('/sys/class/rfkill/').glob('rfkill*'):
        if (path / 'type').read_text().strip() == 'bluetooth':
            return (path / 'soft').read_text().strip() == '0'
    return None

def create_other_actions(client):
    networking_enabled = client.networking_get_enabled()
    networking_action = "Disable" if networking_enabled else "Enable"

    wifi_enabled = client.wireless_get_enabled()
    wifi_action = "Disable" if wifi_enabled else "Enable"

    bluetooth_enabled = bluetooth_get_enabled()
    bluetooth_action = "Disable" if bluetooth_enabled else "Enable"

    actions = [Action(f"{wifi_action} Wifi", toggle_wifi,
                      not wifi_enabled),
               Action(f"{networking_action} Networking",
                      toggle_networking, not networking_enabled)]
    if bluetooth_enabled is not None:
        actions.append(Action(f"{bluetooth_action} Bluetooth",
                              toggle_bluetooth, not bluetooth_enabled))
    actions += [Action("Launch Connection Manager", launch_connection_editor),
                Action("Delete a Connection", delete_connection)]
    if wifi_enabled:
        actions.append(Action("Rescan Wifi Networks", rescan_wifi))
    return actions

def rescan_wifi():
    for dev in CLIENT.get_devices():
        if gi.repository.NM.DeviceWifi == type(dev):
            try:
                dev.request_scan_async(None, rescan_cb, None)
                LOOP.run()
            except gi.repository.GLib.Error as err:
                notify("Network", 
                       "Wifi rescan failed", urgency="critical")
                if not err.code == 6: 
                    raise err

def rescan_cb(dev, res, data):
    if dev.request_scan_finish(res) is True:
        notify("Network",
               "Wifi scan complete",)
    else:
        notify("Network", 
               "Wifi scan failed", 
               urgency="critical")
    LOOP.quit()

def ssid_to_utf8(nm_ap):
    ssid = nm_ap.get_ssid()
    if not ssid:
        return ""
    ret = NM.utils_ssid_to_utf8(ssid.get_data())
    return ret

def prompt_saved(saved_cons):
    actions = create_saved_actions(saved_cons)
    sel = get_selection(actions)
    sel()

def ap_security(nm_ap):
    flags = nm_ap.get_flags()
    wpa_flags = nm_ap.get_wpa_flags()
    rsn_flags = nm_ap.get_rsn_flags()
    sec_str = ""
    if ((flags & getattr(NM, '80211ApFlags').PRIVACY) and
            (wpa_flags == 0) and (rsn_flags == 0)):
        sec_str += " WEP"
    if wpa_flags != 0:
        sec_str += " WPA1"
    if rsn_flags != 0:
        sec_str += " WPA2"
    if ((wpa_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X) or
            (rsn_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X)):
        sec_str += " 802.1X"

    if sec_str == "":
        sec_str = "--"
    return sec_str.lstrip()

class Action():
    def __init__(self,
                 name,
                 func,
                 args=None,
                 active=False):
        self.name = name
        self.func = func
        self.is_active = active
        if args is None:
            self.args = None
        elif isinstance(args, list):
            self.args = args
        else:
            self.args = [args]

    def __str__(self):
        return self.name

    def __call__(self):
        if self.args is None:
            self.func()
        else:
            self.func(*self.args)

def conn_matches_adapter(conn, adapter):
    setting_wireless = conn.get_setting_wireless()
    mac = setting_wireless.get_mac_address()
    if mac is not None:
        return mac == adapter.get_permanent_hw_address()

    setting_connection = conn.get_setting_connection()
    interface = setting_connection.get_interface_name()
    if interface is not None:
        return interface == adapter.get_iface()

    return True

def process_ap(nm_ap, is_active, adapter):
    if is_active:
        CLIENT.deactivate_connection_async(nm_ap, None, deactivate_cb, nm_ap)
        LOOP.run()
    else:
        conns_cur = [i for i in CONNS if
                     i.get_setting_wireless() is not None and
                     conn_matches_adapter(i, adapter)]
        con = nm_ap.filter_connections(conns_cur)
        if len(con) > 1:
            raise ValueError("There are multiple connections possible")

        if len(con) == 1:
            CLIENT.activate_connection_async(con[0], adapter, nm_ap.get_path(),
                                             None, activate_cb, nm_ap)
            LOOP.run()
        else:
            if ap_security(nm_ap) != "--":
                password = get_passphrase()
            else:
                password = ""
            set_new_connection(nm_ap, password, adapter)

def activate_cb(dev, res, data):
    try:
        conn = dev.activate_connection_finish(res)
    except GLib.Error:
        conn = None
    if conn is not None:
        notify(f"Activated {conn.get_id()}")
    else:
        notify(f"Problem activating {data.get_id()}", urgency="critical")
    LOOP.quit()

def deactivate_cb(dev, res, data):
    if dev.deactivate_connection_finish(res) is True:
        notify(f"Deactivated {data.get_id()}")
    else:
        notify(f"Problem deactivating {data.get_id()}", urgency="critical")
    LOOP.quit()

def process_vpngsm(con, activate):
    if activate:
        CLIENT.activate_connection_async(con, None, None,
                                         None, activate_cb, con)
    else:
        CLIENT.deactivate_connection_async(con, None, deactivate_cb, con)
    LOOP.run()

def create_ap_actions(aps, active_ap, active_connection, adapter): 
    active_ap_bssid = active_ap.get_bssid() if active_ap is not None else ""

    names = [ssid_to_utf8(ap) for ap in aps]
    max_len_name = max([len(name) for name in names]) if names else 0
    secs = [ap_security(ap) for ap in aps]
    max_len_sec = max([len(sec) for sec in secs]) if secs else 0

    ap_actions = []

    for nm_ap, name, sec in zip(aps, names, secs):
        bars = NM.utils_wifi_strength_bars(nm_ap.get_strength())
        wifi_chars = CONF.get("dmenu", "wifi_chars", fallback=False)
        if wifi_chars:
            bars = "".join([wifi_chars[i] for i, j in enumerate(bars) if j == '*'])
        is_active = nm_ap.get_bssid() == active_ap_bssid
        compact = CONF.getboolean("dmenu", "compact", fallback=False)
        if compact:
            action_name = f"{name}  {sec}  {bars}"
        else:
            action_name = f"{name:<{max_len_name}s}  {sec:<{max_len_sec}s} {bars:>4}"
        if is_active:
            ap_actions.append(Action(action_name, process_ap,
                                     [active_connection, True, adapter],
                                     active=True))
        else:
            ap_actions.append(Action(action_name, process_ap,
                                     [nm_ap, False, adapter]))
    return ap_actions

def create_vpn_actions(vpns, active):
    active_vpns = [i for i in active if i.get_vpn()]
    return _create_vpngsm_actions(vpns, active_vpns, "VPN")

def create_wireguard_actions(wgs, active):
    active_wgs = [i for i in active if i.get_connection_type() == "wireguard"]
    return _create_vpngsm_actions(wgs, active_wgs, "Wireguard")

def create_eth_actions(eths, active):
    active_eths = [i for i in active if 'ethernet' in i.get_connection_type()]
    return _create_vpngsm_actions(eths, active_eths, "Eth")

def create_gsm_actions(gsms, active):
    active_gsms = [i for i in active if
                   i.get_connection() is not None and
                   i.get_connection().is_type(NM.SETTING_GSM_SETTING_NAME)]
    return _create_vpngsm_actions(gsms, active_gsms, "GSM")

def create_blue_actions(blues, active):
    active_blues = [i for i in active if
                    i.get_connection() is not None and
                    i.get_connection().is_type(NM.SETTING_BLUETOOTH_SETTING_NAME)]
    return _create_vpngsm_actions(blues, active_blues, "Bluetooth")

def create_saved_actions(saved):
    return _create_vpngsm_actions(saved, [], "SAVED")

def _create_vpngsm_actions(cons, active_cons, label):
    active_con_ids = [a.get_id() for a in active_cons]
    actions = []
    for con in cons:
        is_active = con.get_id() in active_con_ids
        action_name = f"{con.get_id()}:{label}"
        if is_active:
            active_connection = [a for a in active_cons
                                 if a.get_id() == con.get_id()]
            if len(active_connection) != 1:
                raise ValueError(f"Multiple active connections match {con.get_id()}")
            active_connection = active_connection[0]

            actions.append(Action(action_name, process_vpngsm,
                                  [active_connection, False], active=True))
        else:
            actions.append(Action(action_name, process_vpngsm,
                                  [con, True]))
    return actions

def create_wwan_actions(client):
    wwan_enabled = client.wwan_get_enabled()
    wwan_action = "Disable" if wwan_enabled else "Enable"
    return [Action(f"{wwan_action} WWAN", toggle_wwan, not wwan_enabled)]

def combine_actions(eths, aps, vpns, wgs, gsms, blues, wwan, others, saved):
    compact = CONF.getboolean("dmenu", "compact", fallback=False)
    empty_action = [Action('', None)] if not compact else []
    all_actions = []
    all_actions += eths + empty_action if eths else []
    all_actions += aps + empty_action if aps else []
    all_actions += vpns + empty_action if vpns else []
    all_actions += wgs + empty_action if wgs else []
    all_actions += gsms + empty_action if (gsms and wwan) else []
    all_actions += blues + empty_action if blues else []
    all_actions += wwan + empty_action if wwan else []
    all_actions += others + empty_action if others else []
    all_actions += saved + empty_action if saved else []
    return all_actions

def get_selection(all_actions):
    rofi_highlight = CONF.getboolean('dmenu', 'rofi_highlight', fallback=False)
    inp = []

    if rofi_highlight is True:
        inp = [str(action) for action in all_actions]
    else:
        inp = [('== ' if action.is_active else '   ') + str(action)
               for action in all_actions]
    active_lines = [index for index, action in enumerate(all_actions)
                    if action.is_active]

    command = dmenu_cmd(len(inp), active_lines=active_lines)
    sel = subprocess.run(command,
                         capture_output=True,
                         check=False,
                         input="\n".join(inp),
                         encoding=ENC,
                         env=ENV).stdout

    if not sel.rstrip():
        sys.exit()

    if rofi_highlight is False:
        action = [i for i in all_actions
                  if ((str(i).strip() == str(sel.strip())
                       and not i.is_active) or
                      ('== ' + str(i) == str(sel.rstrip('\n'))
                       and i.is_active))]
    else:
        action = [i for i in all_actions if str(i).strip() == sel.strip()]
    assert len(action) == 1, f"Selection was ambiguous: '{str(sel.strip())}'"
    return action[0]

def toggle_networking(enable):
    toggle = GLib.Variant.new_tuple(GLib.Variant.new_boolean(enable))
    try:
        CLIENT.dbus_call(NM.DBUS_PATH, NM.DBUS_INTERFACE, "Enable", toggle,
                         None, -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.networking_set_enabled(enable)
    notify(f"Networking {'enabled' if enable is True else 'disabled'}")

def toggle_wifi(enable):
    toggle = GLib.Variant.new_boolean(enable)
    try:
        CLIENT.dbus_set_property(NM.DBUS_PATH, NM.DBUS_INTERFACE, "WirelessEnabled", toggle,
                                 -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.wireless_set_enabled(enable)
    notify(f"Wifi {'enabled' if enable is True else 'disabled'}")

def toggle_wwan(enable):
    toggle = GLib.Variant.new_boolean(enable)
    try:
        CLIENT.dbus_set_property(NM.DBUS_PATH, NM.DBUS_INTERFACE, "WwanEnabled", toggle,
                                 -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.wwan_set_enabled(enable)
    notify(f"Wwan {'enabled' if enable is True else 'disabled'}")

def toggle_bluetooth(enable):
    type_bluetooth = 2
    op_change_all = 3
    idx = 0
    soft_state = 0 if enable else 1
    hard_state = 0

    data = struct.pack("IBBBB", idx, type_bluetooth, op_change_all,
                       soft_state, hard_state)

    try:
        with open('/dev/rfkill', 'r+b', buffering=0) as rff:
            rff.write(data)
    except PermissionError:
        notify("Lacking permission to write to /dev/rfkill.",
               "Check README for configuration options.",
               urgency="critical")
    else:
        notify(f"Bluetooth {'enabled' if enable else 'disabled'}")

def launch_connection_editor():
    terminal = CONF.get("editor", "terminal", fallback="xterm")
    gui_if_available = CONF.getboolean("editor", "gui_if_available", fallback=True)
    guis = ["gnome-continue-center", "nm-connection-editor"]
    if gui_if_available is True:
        for gui in guis:
            if is_installed(gui):
                subprocess.run(gui, check=False)
                return
    if is_installed("nmtui"):
        subprocess.run([terminal, "-e", "nmtui"], check=False)
        return
    notify("Network", "No network connection editor installed", urgency="critical")

def get_passphrase():
    pinentry = CONF.get("dmenu", "pinentry", fallback=None)
    if pinentry:
        pin = ""
        out = subprocess.run(pinentry,
                             capture_output=True,
                             check=False,
                             encoding=ENC,
                             input='setdesc Get network password\ngetpin\n').stdout
        if out:
            res = out.split("\n")[2]
            if res.startswith("D "):
                pin = res.split("D ")[1]
        return pin
    return subprocess.run(dmenu_cmd(0, "Passphrase"),
                          stdin=subprocess.DEVNULL,
                          capture_output=True,
                          check=False,
                          encoding=ENC).stdout

def delete_connection():
    conn_acts = [Action(i.get_id(), i.delete_async, args=[None, delete_cb, None]) for i in CONNS]
    conn_names = "\n".join([str(i) for i in conn_acts])
    sel = subprocess.run(dmenu_cmd(len(conn_acts), "Choose a connection to Delete:"),
                         capture_output=True,
                         check=False,
                         input=conn_names,
                         encoding=ENC,
                         env=ENV).stdout
    if not sel.strip():
        sys.exit()
    action = [i for i in conn_acts if str(i) == sel.rstrip("\n")]
    assert len(action) == 1, f"Selection was ambiguous: {str(sel)}"
    action[0]()
    LOOP.run()

def delete_cb(dev, res, data):
    if dev.delete_finish(res) is True:
        notify(f"Deleted {dev.get_id()}")
    else:
        notify(f"Problem deleting {dev.get_id()}", urgency="critical")
    LOOP.quit()

def set_new_connection(nm_ap, nm_pw, adapter):
    nm_pw = str(nm_pw).strip()
    profile = create_wifi_profile(nm_ap, nm_pw, adapter)
    CLIENT.add_and_activate_connection_async(profile, adapter, nm_ap.get_path(),
                                             None, verify_conn, profile)
    LOOP.run()

def create_wifi_profile(nm_ap, password, adapter):
    ap_sec = ap_security(nm_ap)
    profile = NM.SimpleConnection.new()

    s_con = NM.SettingConnection.new()
    s_con.set_property(NM.SETTING_CONNECTION_ID, ssid_to_utf8(nm_ap))
    s_con.set_property(NM.SETTING_CONNECTION_UUID, str(uuid.uuid4()))
    s_con.set_property(NM.SETTING_CONNECTION_TYPE, "802-11-wireless")
    profile.add_setting(s_con)

    s_wifi = NM.SettingWireless.new()
    s_wifi.set_property(NM.SETTING_WIRELESS_SSID, nm_ap.get_ssid())
    s_wifi.set_property(NM.SETTING_WIRELESS_MODE, 'infrastructure')
    s_wifi.set_property(NM.SETTING_WIRELESS_MAC_ADDRESS, adapter.get_permanent_hw_address())
    profile.add_setting(s_wifi)

    s_ip4 = NM.SettingIP4Config.new()
    s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, "auto")
    profile.add_setting(s_ip4)

    s_ip6 = NM.SettingIP6Config.new()
    s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, "auto")
    profile.add_setting(s_ip6)

    if ap_sec != "--":
        s_wifi_sec = NM.SettingWirelessSecurity.new()
        if "WPA" in ap_sec:
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_KEY_MGMT,
                                    "wpa-psk")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_AUTH_ALG,
                                    "open")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_PSK, password)
        elif "WEP" in ap_sec:
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_KEY_MGMT,
                                    "None")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE,
                                    NM.WepKeyType.PASSPHRASE)
            s_wifi_sec.set_wep_key(0, password)
        profile.add_setting(s_wifi_sec)

    return profile

def verify_conn(client, result, data):
    try:
        act_conn = client.add_and_activate_connection_finish(result)
        conn = act_conn.get_connection()
        if not all([conn.verify(),
                    conn.verify_secrets(),
                    data.verify(),
                    data.verify_secrets()]):
            raise GLib.Error
        notify(f"Added {conn.get_id()}")
    except GLib.Error:
        try:
            notify(f"Connection to {conn.get_id()} failed",
                   urgency="critical", app_name="Network")
            conn.delete_async(None, None, None)
        except UnboundLocalError:
            pass
    finally:
        LOOP.quit()

def create_ap_list(adapter, active_connections):
    aps = []
    ap_names = []
    active_ap = adapter.get_active_access_point()
    aps_all = sorted(adapter.get_access_points(),
                     key=lambda a: a.get_strength(), reverse=True)
    conns_cur = [i for i in CONNS if
                 i.get_setting_wireless() is not None and
                 conn_matches_adapter(i, adapter)]
    try:
        ap_conns = active_ap.filter_connections(conns_cur)
        active_ap_name = ssid_to_utf8(active_ap)
        active_ap_con = [active_conn for active_conn in active_connections
                         if active_conn.get_connection() in ap_conns]
    except AttributeError:
        active_ap_name = None
        active_ap_con = []
    if len(active_ap_con) > 1:
        raise ValueError("Multiple connection profiles match"
                         " the wireless AP")
    active_ap_con = active_ap_con[0] if active_ap_con else None
    for nm_ap in aps_all:
        ap_name = ssid_to_utf8(nm_ap)
        if nm_ap != active_ap and ap_name == active_ap_name:
            continue
        if ap_name not in ap_names:
            ap_names.append(ap_name)
            aps.append(nm_ap)
    return aps, active_ap, active_ap_con, adapter

def notify(message, details=None, urgency="low"):
    args = ["-u", urgency, "-a", "Network", "-i", "~/.config/sweetconfigs-xorg/dunst/icons/network.svg", message]
    if details is not None:
        args.append(details)
    if is_installed("notify-send"):
        subprocess.run(["notify-send"] + args, check=False)

def run():
    """Main script entrypoint"""
    active = CLIENT.get_active_connections()
    adapter = choose_adapter(CLIENT)
    if adapter:
        ap_actions = create_ap_actions(*create_ap_list(adapter, active))
    else:
        ap_actions = []

    vpns = [i for i in CONNS if i.is_type(NM.SETTING_VPN_SETTING_NAME)]
    try:
        wgs = [i for i in CONNS if i.is_type(NM.SETTING_WIREGUARD_SETTING_NAME)]
    except AttributeError:
        wgs = []
    eths = [i for i in CONNS if i.is_type(NM.SETTING_WIRED_SETTING_NAME)]
    blues = [i for i in CONNS if i.is_type(NM.SETTING_BLUETOOTH_SETTING_NAME)]

    vpn_actions = create_vpn_actions(vpns, active)
    wg_actions = create_wireguard_actions(wgs, active)
    eth_actions = create_eth_actions(eths, active)
    blue_actions = create_blue_actions(blues, active)
    other_actions = create_other_actions(CLIENT)
    wwan_installed = is_installed("ModemManager")
    if wwan_installed:
        gsms = [i for i in CONNS if i.is_type(NM.SETTING_GSM_SETTING_NAME)]
        gsm_actions = create_gsm_actions(gsms, active)
        wwan_actions = create_wwan_actions(CLIENT)
    else:
        gsm_actions = []
        wwan_actions = []

    list_saved = CONF.getboolean('dmenu', 'list_saved', fallback=False)
    saved_cons = [i for i in CONNS if i not in vpns + wgs + eths + blues]
    if list_saved:
        saved_actions = create_saved_actions(saved_cons)
    else:
        saved_actions = [Action("Saved connections", prompt_saved, [saved_cons])]

    actions = combine_actions(eth_actions, ap_actions, vpn_actions, wg_actions,
                              gsm_actions, blue_actions, wwan_actions,
                              other_actions, saved_actions)
    sel = get_selection(actions)
    sel()

if __name__ == '__main__':
    run()